name: IPE Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Code quality checks
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy pylint
          
      - name: Run Black formatter check
        run: black --check --diff .
        
      - name: Run Flake8 linter
        run: flake8 ipe/ scripts/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Run MyPy type checking
        run: mypy ipe/ scripts/ --ignore-missing-imports
        continue-on-error: true
        
      - name: Run Pylint
        run: pylint ipe/ scripts/ --disable=C0103,R0903,W0613
        continue-on-error: true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r ipe/ scripts/ -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Unit tests with coverage
  test-python:
    runs-on: ubuntu-latest
    name: Python Unit Tests
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: ipe_test_user
          POSTGRES_PASSWORD: ipe_test_password
          POSTGRES_DB: ipe_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov pytest-xdist
          
      - name: Set up test database
        env:
          DATABASE_URL: postgresql://ipe_test_user:ipe_test_password@localhost:5432/ipe_test_db
        run: |
          # Install Alembic and psycopg2 for database operations
          pip install alembic psycopg2-binary
          
          # Run migrations
          alembic upgrade head
          
      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://ipe_test_user:ipe_test_password@localhost:5432/ipe_test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          coverage run -m pytest tests/unit/ -v --tb=short
          coverage xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration tests
  test-integration:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [test-python]
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: ipe_test_user
          POSTGRES_PASSWORD: ipe_test_password
          POSTGRES_DB: ipe_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic psycopg2-binary
          
      - name: Set up test database
        env:
          DATABASE_URL: postgresql://ipe_test_user:ipe_test_password@localhost:5432/ipe_test_db
        run: |
          alembic upgrade head
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://ipe_test_user:ipe_test_password@localhost:5432/ipe_test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: test
        run: |
          pytest tests/integration/ -v --tb=short

  # Docker build and security scan
  build-and-scan:
    runs-on: ubuntu-latest
    name: Docker Build & Security Scan
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          ./scripts/docker-build.sh -t production -n ipe -g ci-test
          
      - name: Check image size
        run: |
          SIZE=$(docker images ipe:ci-test --format "{{.Size}}")
          echo "Docker image size: $SIZE"
          # Extract numeric size in bytes for comparison
          SIZE_BYTES=$(docker inspect ipe:ci-test --format='{{.Size}}')
          MAX_SIZE_BYTES=$((1024*1024*1024))  # 1GB
          if [ $SIZE_BYTES -gt $MAX_SIZE_BYTES ]; then
            echo "❌ Image size exceeds 1GB limit"
            exit 1
          else
            echo "✅ Image size is within 1GB limit"
          fi
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ipe:ci-test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # End-to-end tests
  test-e2e:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: [build-and-scan, test-integration]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and start services
        run: |
          docker compose -f docker-compose.yml up -d --build
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check if API is responding
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "✅ API is ready"
              break
            fi
            echo "Waiting for API... ($i/30)"
            sleep 2
          done
          
      - name: Run end-to-end tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/e2e/ -v --tb=short
          
      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs > docker-logs.txt
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt
          
      - name: Clean up
        if: always()
        run: |
          docker compose down -v

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    name: Performance Benchmarks
    needs: [test-python]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark
          
      - name: Run performance benchmarks
        run: |
          pytest tests/unit/ -k "benchmark" --benchmark-json=benchmark.json
          
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Deployment readiness check
  deployment-check:
    runs-on: ubuntu-latest
    name: Deployment Readiness
    needs: [test-python, test-integration, build-and-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check deployment configuration
        run: |
          echo "✅ All tests passed"
          echo "✅ Docker image built successfully"
          echo "✅ Security scans completed"
          echo "🚀 Ready for deployment"
          
      - name: Create deployment artifact
        run: |
          mkdir -p deployment-artifacts
          echo "commit=${{ github.sha }}" > deployment-artifacts/build.env
          echo "tag=v$(date +%Y%m%d-%H%M%S)" >> deployment-artifacts/build.env
          echo "branch=${{ github.ref_name }}" >> deployment-artifacts/build.env
          
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts/